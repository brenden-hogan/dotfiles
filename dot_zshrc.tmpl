export ALTZSH={{ .alt_zsh }}

if [[ "$ALTZSH" != "" ]]
then  
    source $ALTZSH
fi

# User alias's

alias ll='ls -l'
alias lla='ls -al'
alias llt='ls -altr'

alias llt='eza --tree --level 15 -l'
alias lt='eza --tree --level 15'


{{- if eq .role "work" }}
export DEVENV={{ .devenv }}
alias dev-env='ssh $DEVENV'
alias auth='{{ .auth_cmd }}'
{{- end }}

{{- if eq .role "home" }}
alias npm='pnpm'
{{- end }}

alias ws='cd {{.code_repo}}'

alias h='history 0'
alias hFind='h | grep -i'

alias sZsh='source ~/.zshrc'

alias gs='git status'
alias gb='git branch -a'
alias gco='git checkout'
alias gclean='git clean -xdf'
alias grs1='git reset HEAD~'
gitRecur() {
  find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} $* \;
}

stgRecur() {
  find . -type d -depth 1 -exec stg -C {} $* \;
}


alias wUnison='watch "ps -ef | grep unison | grep -v grep"'

# Set up asdf for Python package management
. $HOME/.asdf/asdf.sh
# append completions to fpath
fpath=(${ASDF_DIR}/completions $fpath)
# initialise completions with ZSH's compinit
autoload -Uz compinit && compinit

# Used if stg-git is installed and the user has run `stg completion zsh -o ~/stg_compl.sh`
if [ ! -f !/stg_compl.sh ]; then
  fpath=(~/stg_compl.sh $fpath)
  # initialise completions with ZSH's compinit
  autoload -Uz compinit && compinit
fi

alias cdF='z'
alias cdFi='zi'
eval "$(zoxide init zsh)"

setopt inc_append_history

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export PATH="/opt/homebrew/opt/node@12/bin:$PATH"

eval "$(mcfly init zsh)"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
export PATH=$HOME/.toolbox/bin:$PATH
